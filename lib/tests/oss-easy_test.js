// Generated by CoffeeScript 1.8.0
(function() {
  var FILE_NAMES, STRING_CONTENT_FOR_TESTING, STRING_CONTENT_FOR_TESTING2, config, fs, oss, ossEasy, ossOptions, path, should;

  require('mocha');

  should = require('chai').should();

  ossEasy = require("../oss-easy");

  fs = require("fs");

  path = require("path");

  config = require("./config");

  STRING_CONTENT_FOR_TESTING = "hahaaha just a piece of data";

  STRING_CONTENT_FOR_TESTING2 = "222 just a piece of data 222";

  ossOptions = {
    accessKeyId: config.accessKeyId,
    accessKeySecret: config.accessKeySecret,
    bucket: config.bucket
  };

  oss = new ossEasy(ossOptions);

  FILE_NAMES = ["" + (Date.now()) + "-t1", "" + (Date.now()) + "-t2", "" + (Date.now()) + "-t3", "" + (Date.now()) + "-t4"];

  describe("testing oss", function(done) {
    this.timeout(10000);
    it("writeFile and readFile", function(done) {
      var filename;
      filename = "just/a/test.json";
      return oss.writeFile(filename, STRING_CONTENT_FOR_TESTING, function(err) {
        should.not.exist(err);
        return oss.readFile(filename, 'utf8', function(err, data) {
          console.log("[readFile] data:" + data);
          data.should.equal(STRING_CONTENT_FOR_TESTING);
          return done();
        });
      });
    });
    it("uploadFile and downloadFile", function(done) {
      var filename, pathToTempFile, pathToTempFile2;
      pathToTempFile = "/tmp/" + (Date.now());
      pathToTempFile2 = "/tmp/" + (Date.now()) + "-back";
      fs.writeFileSync(pathToTempFile, STRING_CONTENT_FOR_TESTING2);
      filename = "test-file-upload-download";
      return oss.uploadFile(pathToTempFile, filename, function(err) {
        should.not.exist(err);
        return oss.downloadFile(filename, pathToTempFile2, function(err) {
          should.not.exist(err);
          fs.readFileSync(pathToTempFile2, 'utf8').should.equal(fs.readFileSync(pathToTempFile, 'utf8'));
          return done();
        });
      });
    });
    it("uploadFile file with custom header", function(done) {
      var filename, pathToTempFile;
      pathToTempFile = "/tmp/" + (Date.now()) + "-custom-header";
      fs.writeFileSync(pathToTempFile, STRING_CONTENT_FOR_TESTING2);
      filename = "test-file-upload-custom-header";
      return oss.uploadFile(pathToTempFile, filename, {
        "Cache-Control": "max-age=5",
        "Expires": Date.now() + 300000
      }, function(err) {
        should.not.exist(err);
        done();
      });
    });
    it("transport file", function(done) {
      var arr, pathToTempFile2, remoteFilePath, url;
      url = "http://asset-image.weixinzhongxin.com/temp_img_resize/2.pic_hd.jpg";
      arr = url.split('/');
      remoteFilePath = "oss-easy-test/transport/" + arr[arr.length - 1];
      pathToTempFile2 = "/tmp/" + (Date.now()) + "-back";
      return oss.uploadFile(url, remoteFilePath, function(err) {
        should.not.exist(err);
        return oss.downloadFile(remoteFilePath, pathToTempFile2, function(err, data) {
          should.not.exist(err);
          return done();
        });
      });
    });
    it("uploadFile multiple files", function(done) {
      var i, tasks, _i;
      tasks = {};
      for (i = _i = 0; _i < 4; i = _i += 1) {
        tasks["/tmp/" + FILE_NAMES[i]] = "test/upload/multiple/files-" + i;
        fs.writeFileSync("/tmp/" + FILE_NAMES[i], "" + STRING_CONTENT_FOR_TESTING2 + "-" + i);
      }
      oss.uploadFiles(tasks, function(err) {
        should.not.exist(err);
        done();
      });
    });
    it("copy file", function(done) {
      var destinationFilePath, sourceFilePath;
      sourceFilePath = "test/upload/multiple/files-0";
      destinationFilePath = "test/upload/multiple/files-00";
      oss.copyFile(sourceFilePath, destinationFilePath, function(err) {
        should.not.exist(err);
        done();
      });
    });
    return it("copy multiple file", function(done) {
      var destinationFilePath, i, sourceFilePath, tasks, _i;
      tasks = {};
      for (i = _i = 0; _i < 4; i = _i += 1) {
        sourceFilePath = "test/upload/multiple/files-" + i;
        destinationFilePath = "test/upload/multiple/files-1" + i;
        tasks[sourceFilePath] = destinationFilePath;
      }
      oss.copyFiles(tasks, function(err) {
        should.not.exist(err);
        done();
      });
    });
  });

}).call(this);
