// Generated by CoffeeScript 1.6.3
(function() {
  var OssEasy, async, fs, generateRandomId, ossAPI, path, _;

  _ = require("underscore");

  ossAPI = require('oss-client');

  fs = require("fs");

  async = require("async");

  path = require("path");

  generateRandomId = function() {
    return "" + ((Math.random() * 36 >> 0).toString(36)) + ((Math.random() * 36 >> 0).toString(36)) + (Date.now().toString(36));
  };

  OssEasy = (function() {
    function OssEasy(key, secret, targetBucket) {
      this.targetBucket = targetBucket;
      this.oss = new ossAPI.OssClient({
        accessKeyId: key,
        accessKeySecret: secret
      });
    }

    OssEasy.prototype.readFile = function(filename, options, callback) {
      var pathToTempFile;
      console.log("[oss-easy::readFile] " + filename);
      pathToTempFile = path.join("/tmp/", generateRandomId());
      this.downloadFile(filename, pathToTempFile, function(err) {
        if (err != null) {
          return callback(err);
        } else {
          return fs.readFile(pathToTempFile, options, callback);
        }
      });
    };

    OssEasy.prototype.writeFile = function(filename, data, callback) {
      var pathToTempFile,
        _this = this;
      console.log("[oss-easy::writeFile] " + filename);
      pathToTempFile = path.join("/tmp/", generateRandomId());
      fs.writeFile(pathToTempFile, data, function(err) {
        if (err != null) {
          return callback(err);
        } else {
          return _this.uploadFile(filename, pathToTempFile, callback);
        }
      });
    };

    OssEasy.prototype.uploadFile = function(filename, pathToFile, callback) {
      var args;
      console.log("[oss-easy::uploadFile] " + pathToFile + " -> " + filename);
      args = {
        bucket: this.targetBucket,
        object: filename,
        srcFile: pathToFile
      };
      this.oss.putObject(args, callback);
    };

    OssEasy.prototype.uploadFileBatch = function(filenames, basePath, callback) {
      var err, filename, i, _i, _len,
        _this = this;
      if (!Array.isArray(filenames)) {
        err = "bad argument, filenames:" + filenames;
        console.error("[oss-easy::uploadFilesd] " + err);
        callback(err);
        return;
      }
      if (_.isFunction(basePath) && (callback == null)) {
        callback = basePath;
        basePath = null;
      }
      if (_.isString(basePath) && basePath.length > 0) {
        filenames = filenames.concat();
        for (i = _i = 0, _len = filenames.length; _i < _len; i = ++_i) {
          filename = filenames[i];
          filenames[i] = path.join(basePath, filename);
        }
      }
      async.eachSeries(filenames, function(filename, eachCallback) {
        return _this.uploadFile(path.basename(filename), filename, eachCallback);
      }, callback);
    };

    OssEasy.prototype.downloadFile = function(filename, pathToFile, callback) {
      var args;
      console.log("[oss-easy::downloadFile] " + pathToFile + " <- " + filename);
      args = {
        bucket: this.targetBucket,
        object: filename,
        dstFile: pathToFile
      };
      this.oss.getObject(args, callback);
    };

    OssEasy.prototype.deleteFile = function(filename, callback) {
      var args;
      console.log("[oss-easy::deleteFile] " + filename);
      args = {
        bucket: this.targetBucket,
        object: filename
      };
      this.oss.deleteObject(args, callback);
    };

    OssEasy.prototype.deleteFileBatch = function(filenames, callback) {
      var err,
        _this = this;
      if (!Array.isArray(filenames)) {
        err = "bad argument, filenames:" + filenames;
        console.error("[oss-easy::deleteFileBatch] " + err);
        callback(err);
        return;
      }
      async.eachSeries(filenames, function(filename, eachCallback) {
        return _this.deleteFile(filename, eachCallback);
      }, callback);
    };

    return OssEasy;

  })();

  exports.init = function(key, secret, bucketName) {
    if (!(_.isString(key) && _.isString(secret) && _.isString(bucketName) && key.length > 0 && secret.length > 0 && bucketName.length > 0)) {
      throw new Error("Invalid arguments. key:" + key + ", secret:" + secret + ", bucket:" + bucketName);
    }
    return new OssEasy(key, secret, bucketName);
  };

}).call(this);
