// Generated by CoffeeScript 1.6.3
(function() {
  var OssEasy, async, debuglog, fs, generateRandomId, ossAPI, path, _;

  _ = require("underscore");

  ossAPI = require('oss-client');

  fs = require("fs");

  async = require("async");

  path = require("path");

  debuglog = require("debug")("oss-easy");

  generateRandomId = function() {
    return "" + ((Math.random() * 36 >> 0).toString(36)) + ((Math.random() * 36 >> 0).toString(36)) + (Date.now().toString(36));
  };

  OssEasy = (function() {
    function OssEasy(ossOptions, targetBucket) {
      this.targetBucket = targetBucket;
      this.targetBucket || (this.targetBucket = ossOptions.bucket);
      if (!(_.isString(ossOptions.accessKeyId) && _.isString(ossOptions.accessKeySecret) && _.isString(this.targetBucket))) {
        throw new Error("missing input parameter: accessKeyId:" + ossOptions.accessKeyId + ", accessKeySecret: " + ossOptions.accessKeySecret + ", targetBucket:" + targetBucket);
        return;
      }
      ossOptions['timeout'] = ossOptions['timeout'] || 5 * 60 * 1000;
      if (ossOptions.uploaderHeaders != null) {
        this.uploaderHeaders = ossOptions.uploaderHeaders;
        delete ossOptions['uploaderHeaders'];
      }
      debuglog("[constructor] ossOptions:%j", ossOptions);
      this.oss = new ossAPI.OssClient(ossOptions);
    }

    OssEasy.prototype.readFile = function(remoteFilePath, options, callback) {
      var pathToTempFile;
      debuglog("[oss-easy::readFile] " + remoteFilePath);
      pathToTempFile = path.join("/tmp/", generateRandomId());
      this.downloadFile(remoteFilePath, pathToTempFile, function(err) {
        if (err != null) {
          if (_.isFunction(callback)) {
            return callback(err);
          }
        } else {
          return fs.readFile(pathToTempFile, options, callback);
        }
      });
    };

    OssEasy.prototype.writeFile = function(remoteFilePath, data, headers, callback) {
      var args, contentType;
      debuglog("[oss-easy::writeFile] " + remoteFilePath);
      if (Buffer.isBuffer(data)) {
        contentType = "application/octet-stream";
      } else {
        contentType = "text/plain";
        data = new Buffer(data);
      }
      if (_.isFunction(headers) && (callback == null)) {
        callback = headers;
        headers = null;
      }
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath,
        srcFile: data,
        contentType: contentType
      };
      if ((headers != null) || (this.uploaderHeaders != null)) {
        headers = _.extend({}, headers, this.uploaderHeaders);
      }
      if (headers != null) {
        args["userMetas"] = headers;
      }
      this.oss.putObject(args, callback);
    };

    OssEasy.prototype.uploadFile = function(localFilePath, remoteFilePath, headers, callback) {
      var args;
      debuglog("[uploadFile] " + localFilePath + " -> " + remoteFilePath);
      if (_.isFunction(headers) && (callback == null)) {
        callback = headers;
        headers = null;
      }
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath,
        srcFile: localFilePath
      };
      if ((headers != null) || (this.uploaderHeaders != null)) {
        headers = _.extend({}, headers, this.uploaderHeaders);
      }
      if (headers != null) {
        args["userMetas"] = headers;
      }
      debuglog("[uploadFile] headers:%j", headers);
      this.oss.putObject(args, callback);
    };

    OssEasy.prototype.uploadFiles = function(tasks, headers, callback) {
      var err, localFilePaths,
        _this = this;
      debuglog("[uploadFiles] tasks:%j", tasks);
      if (tasks == null) {
        err = "bad argument, tasks:" + tasks;
        console.error("[oss-easy::uploadFiles] " + err);
        if (_.isFunction(callback)) {
          callback(err);
        }
        return;
      }
      if (_.isFunction(headers) && (callback == null)) {
        callback = headers;
        headers = null;
      }
      localFilePaths = _.keys(tasks);
      async.eachSeries(localFilePaths, function(localFilePath, eachCallback) {
        return _this.uploadFile(localFilePath, tasks[localFilePath], headers, eachCallback);
      }, callback);
    };

    OssEasy.prototype.downloadFile = function(remoteFilePath, localFilePath, callback) {
      var args;
      debuglog("[downloadFile] " + localFilePath + " <- " + remoteFilePath);
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath,
        dstFile: localFilePath
      };
      this.oss.getObject(args, callback);
    };

    OssEasy.prototype.downloadFiles = function(tasks, callback) {
      var err, remoteFilePaths,
        _this = this;
      if (tasks == null) {
        err = "bad argument, tasks:" + tasks;
        console.error("[oss-easy::downloadFileBatch] " + err);
        if (_.isFunction(callback)) {
          callback(err);
        }
        return;
      }
      remoteFilePaths = _.keys(tasks);
      async.eachSeries(remoteFilePaths, function(remoteFilePath, eachCallback) {
        return _this.downloadFile(remoteFilePath, tasks[remoteFilePath], eachCallback);
      }, callback);
    };

    OssEasy.prototype.deleteFile = function(remoteFilePath, callback) {
      var args;
      debuglog("[oss-easy::deleteFile] " + remoteFilePath);
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath
      };
      this.oss.deleteObject(args, callback);
    };

    OssEasy.prototype.deleteFiles = function(remoteFilePaths, callback) {
      var err,
        _this = this;
      if (!Array.isArray(remoteFilePaths)) {
        err = "bad argument, remoteFilePaths:" + remoteFilePaths;
        console.error("[oss-easy::deleteFileBatch] " + err);
        if (_.isFunction(callback)) {
          callback(err);
        }
        return;
      }
      async.eachSeries(remoteFilePaths, function(remoteFilePath, eachCallback) {
        return _this.deleteFile(remoteFilePath, eachCallback);
      }, callback);
    };

    return OssEasy;

  })();

  module.exports = OssEasy;

}).call(this);
