// Generated by CoffeeScript 1.8.0
(function() {
  var NONSENCE_CALLBACK, OssEasy, assert, async, debuglog, fs, generateRandomId, ossAPI, path, _;

  _ = require("underscore");

  ossAPI = require('oss-client');

  fs = require("fs");

  async = require("async");

  path = require("path");

  debuglog = require("debug")("oss-easy");

  assert = require("assert");

  generateRandomId = function() {
    return "" + ((Math.random() * 36 >> 0).toString(36)) + ((Math.random() * 36 >> 0).toString(36)) + (Date.now().toString(36));
  };

  NONSENCE_CALLBACK = function() {};

  OssEasy = (function() {
    function OssEasy(ossOptions, targetBucket) {
      assert(ossOptions, "missing options");
      assert(ossOptions.accessKeyId, "missing oss key id");
      assert(ossOptions.accessKeySecret, "missing access secret");
      this.targetBucket = targetBucket || ossOptions.bucket;
      assert(this.targetBucket, "missing bucket name");
      ossOptions['timeout'] = ossOptions['timeout'] || 5 * 60 * 1000;
      if (ossOptions.uploaderHeaders != null) {
        this.uploaderHeaders = ossOptions.uploaderHeaders;
        delete ossOptions['uploaderHeaders'];
      }
      debuglog("[constructor] bucket: %j, ossOptions:%j", this.targetBucket, ossOptions);
      this.oss = new ossAPI.OssClient(ossOptions);
    }

    OssEasy.prototype.readFile = function(remoteFilePath, options, callback) {
      var pathToTempFile;
      debuglog("[readFile] " + remoteFilePath);
      pathToTempFile = path.join("/tmp/", generateRandomId());
      this.downloadFile(remoteFilePath, pathToTempFile, function(err) {
        if (err != null) {
          if (_.isFunction(callback)) {
            return callback(err);
          }
        } else {
          return fs.readFile(pathToTempFile, options, callback);
        }
      });
    };

    OssEasy.prototype.writeFile = function(remoteFilePath, data, headers, callback) {
      var args, contentType;
      debuglog("[writeFile] " + remoteFilePath);
      if (Buffer.isBuffer(data)) {
        contentType = "application/octet-stream";
      } else {
        contentType = "text/plain";
        data = new Buffer(data);
      }
      if (_.isFunction(headers) && (callback == null)) {
        callback = headers;
        headers = null;
      }
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath,
        srcFile: data,
        contentType: contentType
      };
      if ((headers != null) || (this.uploaderHeaders != null)) {
        headers = _.extend({}, headers, this.uploaderHeaders);
      }
      if (headers != null) {
        args["userMetas"] = headers;
      }
      this.oss.putObject(args, callback);
    };

    OssEasy.prototype.uploadFile = function(localFilePath, remoteFilePath, headers, callback) {
      var args, timeKey;
      debuglog("[uploadFile] local:" + localFilePath + " -> " + this.targetBucket + ":" + remoteFilePath);
      timeKey = "[oss-easy::uploadFile] -> " + remoteFilePath;
      console.time(timeKey);
      if (_.isFunction(headers) && (callback == null)) {
        callback = headers;
        headers = null;
      }
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath,
        srcFile: localFilePath
      };
      if ((headers != null) || (this.uploaderHeaders != null)) {
        headers = _.extend({}, headers, this.uploaderHeaders);
      }
      if (headers != null) {
        args["userMetas"] = headers;
      }
      this.oss.putObject(args, function(err) {
        console.timeEnd(timeKey);
        callback(err);
      });
    };

    OssEasy.prototype.uploadFiles = function(tasks, headers, callback) {
      var err, localFilePaths;
      debuglog("[uploadFiles] tasks:%j", tasks);
      if (_.isFunction(headers) && (callback == null)) {
        callback = headers;
        headers = null;
      }
      callback || (callback = NONSENCE_CALLBACK);
      if (tasks == null) {
        err = "bad argument, tasks:" + tasks;
        console.error("ERROR [oss-easy::uploadFiles] " + err);
        return callback(err);
      }
      localFilePaths = _.keys(tasks);
      async.eachSeries(localFilePaths, (function(_this) {
        return function(localFilePath, eachCallback) {
          return _this.uploadFile(localFilePath, tasks[localFilePath], headers, eachCallback);
        };
      })(this), callback);
    };

    OssEasy.prototype.downloadFile = function(remoteFilePath, localFilePath, callback) {
      var args;
      if (callback == null) {
        callback = NONSENCE_CALLBACK;
      }
      debuglog("[downloadFile] " + this.targetBucket + ":" + remoteFilePath + " -> local:" + localFilePath);
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath,
        dstFile: localFilePath
      };
      this.oss.getObject(args, callback);
    };

    OssEasy.prototype.downloadFiles = function(tasks, callback) {
      var err, remoteFilePaths;
      if (callback == null) {
        callback = NONSENCE_CALLBACK;
      }
      if (tasks == null) {
        err = "bad argument, tasks:" + tasks;
        console.error("[oss-easy::downloadFileBatch] " + err);
        if (_.isFunction(callback)) {
          callback(err);
        }
        return;
      }
      remoteFilePaths = _.keys(tasks);
      async.eachSeries(remoteFilePaths, (function(_this) {
        return function(remoteFilePath, eachCallback) {
          return _this.downloadFile(remoteFilePath, tasks[remoteFilePath], eachCallback);
        };
      })(this), callback);
    };

    OssEasy.prototype.deleteFile = function(remoteFilePath, callback) {
      var args, err;
      if (callback == null) {
        callback = NONSENCE_CALLBACK;
      }
      debuglog("[deleteFile] " + remoteFilePath);
      if (!(_.isString(remoteFilePath) && remoteFilePath)) {
        err = "bad argument, remoteFilePath:" + remoteFilePath;
        if (_.isFunction(callback)) {
          callback(err);
        }
        return;
      }
      args = {
        bucket: this.targetBucket,
        object: remoteFilePath
      };
      this.oss.deleteObject(args, callback);
    };

    OssEasy.prototype.deleteFiles = function(remoteFilePaths, callback) {
      var err;
      if (callback == null) {
        callback = NONSENCE_CALLBACK;
      }
      debuglog("[deleteFiles] " + remoteFilePaths);
      if (!(Array.isArray(remoteFilePaths) && remoteFilePaths.length)) {
        err = "bad argument, remoteFilePaths:" + remoteFilePaths;
        debuglog("[deleteFileBatch] " + err);
        if (_.isFunction(callback)) {
          callback(err);
        }
        return;
      }
      async.eachSeries(remoteFilePaths, (function(_this) {
        return function(remoteFilePath, eachCallback) {
          return _this.deleteFile(remoteFilePath, eachCallback);
        };
      })(this), callback);
    };

    OssEasy.prototype.deleteFolder = function(remoteFolderPath, callback) {
      var args, err;
      if (callback == null) {
        callback = NONSENCE_CALLBACK;
      }
      debuglog("[deleteFolder] " + remoteFolderPath);
      if (!(_.isString(remoteFolderPath) && remoteFolderPath)) {
        err = "bad argument, remoteFolderPath:" + remoteFolderPath;
        debuglog("ERROR [deleteFolder] error:" + err);
        callback(err);
        return;
      }
      args = {
        bucket: this.targetBucket,
        prefix: remoteFolderPath,
        delimiter: "/"
      };
      this.oss.listObject(args, (function(_this) {
        return function(err, result) {
          var filelist, item, key, _i, _len, _ref;
          if (err != null) {
            debuglog("ERROR [deleteFolder] error:" + err);
            callback(err);
            return;
          }
          filelist = [];
          try {
            _ref = result.ListBucketResult.Contents;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              key = item.Key;
              filelist.push(Array.isArray(key) ? key[0] : key);
            }
          } catch (_error) {
            err = _error;
            debuglog("ERROR [deleteFolder] error:" + err);
            callback(err);
            return;
          }
          _this.deleteFiles(filelist, callback);
        };
      })(this));
    };

    OssEasy.prototype.copyFile = function(sourceFilePath, destinationFilePath, callback) {
      var args;
      debuglog("[copyFile] " + this.targetBucket + ":" + sourceFilePath + " -> destinationFilePath:" + destinationFilePath);
      args = {
        bucket: this.targetBucket,
        object: destinationFilePath,
        srcObject: sourceFilePath
      };
      this.oss.copyObject(args, function(err) {
        callback(err);
      });
    };

    OssEasy.prototype.copyFiles = function(tasks, callback) {
      var err, sourceFilePaths;
      debuglog("[copyFile] tasks:%j", tasks);
      assert(_.isFunction(callback), "missing callback");
      if (tasks == null) {
        err = "bad argument, tasks:" + tasks;
        console.error("[oss-easy::downloadFileBatch] " + err);
        if (_.isFunction(callback)) {
          callback(err);
        }
        return;
      }
      sourceFilePaths = _.keys(tasks);
      async.eachSeries(sourceFilePaths, (function(_this) {
        return function(sourceFilePath, eachCallback) {
          return _this.copyFile(sourceFilePath, tasks[sourceFilePath], eachCallback);
        };
      })(this), callback);
    };

    return OssEasy;

  })();

  module.exports = OssEasy;

}).call(this);
